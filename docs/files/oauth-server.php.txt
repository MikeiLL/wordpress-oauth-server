<?php
/**
 * Plugin Name: WordPress OAuth2 Server
 * Plugin URI: 
 * Version: 1.0.0
 * Description: WP OAuth is a complete solution for turning WordPress into an Open authentication server.
 * Author: Justin Greer
 * Author URI: http://justin-greer.com
 * License: GPL2
 * Text Domain: oauthserver
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 *
 * @author  Justin Greer <justin@justin-greer.com>
 * @package WP OAuth2 Server
*/
class WO_Server
{

	/**
	 * @var version Current version of the plugin
	 */
	public static $version = "1.0.0";

	/**
	 * @var _instance Current scope of the plugin
	 */
	public static $_instance = null;

	/**
	 * [__construct description]
	 */
	function __construct ()
	{
		if ( function_exists( "__autoload" ) ) {
			spl_autoload_register( "__autoload" );
		}
		spl_autoload_register( array( $this, 'autoload' ) );

		add_action("wp_loaded", array(__CLASS__,"includes"));
		add_action('admin_menu', array(__CLASS__,"options_page"));
		add_action('admin_init', array(__CLASS__,"setup"));
	}

	/**
	 * [instance description]
	 * @return [type] [description]
	 */
	public static function instance ()
	{
		if ( is_null( self::$_instance ) ) 
		{
			self::$_instance = new self();
		}
		return self::$_instance;
	}

	/**
	 * Cloning is forbidden.
	 * @todo  Convert
	 */
	public function __clone() {
		_doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', 'oauthserver' ), '2.1' );
	}

	/**
	 * Unserializing instances of this class is forbidden.
	 * @todo  Convert
	 */
	public function __wakeup() {
		_doing_it_wrong( __FUNCTION__, __( 'Cheatin&#8217; huh?', 'oauthserver' ), '2.1' );
	}

	/**
	 * Autoload all the classes on demand.
	 * All WO classes are located in library directory.
	 * @return [type] [description]
	 */
	public function autoload ($class)
	{
		$path  = null;
		$class = strtolower( $class );
		$file = 'class-' . str_replace( '_', '-', $class ) . '.php';

		if( strpos( $class, "wo_") === 0 )
		{
			$path = dirname( __FILE__ ) . '/library/' . trailingslashit(substr(str_replace( '_', '-', $class ), 18));
		}

		if ( $path && is_readable( $path . $file ) ) 
		{
			include_once( $path . $file );
			return;
		}
	}

	/**
	 * WP OAuth includes. Nothing to special here
	 * @return void
	 */
	public static function includes ()
	{
		require_once( dirname(__FILE__) . '/includes/rewrites.php');
		require_once( dirname(__FILE__) . '/includes/filters.php');
		require_once( dirname(__FILE__) . '/pages/option-page.php');

		// If WP is doing any ajax calls, let include them.
		if ( defined( 'DOING_AJAX' ) ) {
			$this->ajax_includes();
		}
	}

	/**
	 * Ajax inlcludes
	 * @return void
	 */
	public function ajax_includes() {
		include_once( 'includes/class-wo-ajax.php' );
	}

	/**
	 * [setup description]
	 * @return void
	 */
	public static function setup ()
	{
		register_setting( 'oauth-settings', 'disable_oauth_api' );
	}

	/**
	 * [_options_page description]
	 * @return void
	 */
	public static function options_page ()
	{
		add_options_page('OAuth Server', 'OAuth Server', 'manage_options', "oauth-server-settings" , 'wp_oauth_server_options');
	}

}

function _WO ()
{
	return WO_Server::instance();
}
$GLOBAL['WO'] = _WO();
