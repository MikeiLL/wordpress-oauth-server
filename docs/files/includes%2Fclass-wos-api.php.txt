<?php
if( defined("ABSPATH") === false )
	die("Illegal use of the API");
/**
 * WordPress Mobile Oauth Main API Hook
 * This file is used to validate, process and perform all actions
 *
 * This API will need to process the main Oauth API calls as well as any custom event methods
 *
 * @todo Support confidential and public client types
 * Confidential clients tyoes must use HTTPS while public clinets can use both HTTP and HTTPS
 *
 * @todo  Look into supporting unregistered clients (public API)
 * @todo Look into possible supporting mutliple endspoints and or unlimited endpoints
 *
 * @todo Prevent aany and all not OAUTH paramters from being passed as the OAuth redirect URI  (if all endpoints have been whitlisted)
 *
 * The API needs to follow OAuth2 Draft 31
 * @link http://tools.ietf.org/html/draft-ietf-oauth-v2-31
 *
 * - authorize
 * - authenticate
 * - access_token
 *
 * EXTREME CAUTION AND CARFULL HANDLING OF PERSONAL INFORMATION SHOULD BE TAKEN WHEN DEALING WITH
 * INFORMATION AND STORAGE ON A CLIENT DEVICE. PLEASE ENCYPT ALL DATA WITH UP TO DATA TEECHNOLOGY
 * IF YOU PLAN ON STORING PERSONAL INFORMATION ON USER DEVICES.
 *
 * @author Justin Greer <justin@justin-greer.com>
 * @package WordPress Mobile Oauth
 *
 * @todo Add Grant Type support for the following
 * - Authorization Code or Code (Apps running on a web server)
 * - Implicit (browser based or mobile apps)
 * - Password (log in with username and password)
 * - Client credentials (application access)
 *
 * @todo Add scope support. For a fresh install of WordPress there is not much a app can request. For now the builtin scopes will consist ofthe following
 * - photos
 * - name
 *
 * @todo These HEADERS must be set on teh server for all responses
 * - HTTP/1.1 200 OK
 * - Content-Type: application/json;charset=UTF-8
 * - Cache-Control: no-store
 * - Pragma: no-cache
 */
class WO_API extends WO_Server {

 	/**
 	 * @var method
 	 */
 	public $method = null;

 	/**
 	 * [__construct description]
 	 * @todo Find a better way to pass args to the methods in question
 	 */
	public static function init ()
	{
		global $wp_query;
		$method = $wp_query->get("oauth");
		if ( method_exists(__CLASS__, $method) )
		{
			call_user_func( array(__CLASS__, $method));
		}
	}

	/**
	 * [token description]
	 * @param  [type] $args $_REQUEST paramters so that the method can handle the request
	 * @return [type]         [description]
	 */
	private function token ()
	{
		$args = $_REQUEST;
		if ( empty( $args ) )
			wp_die('No paramters given');

		if (empty($args["grant_type"]))
			new WO_Error("unsupported_response_type");

		if ( strtolower($args["grant_type"]) === "token" )
			self::_authorize_token($client, $args);

		print 'Token Method';
		exit;	
	}

	/**
	 * Authorize method will be used for all authorizaton requests
	 *
	 * Authorization Request:
	 * 	response_type MUST be "code"
	 * 	client_id: Clients Identifier
	 * 	redirect_uri: OPTIONAL
	 * 	scope: OPTIONAL
	 * 	state: OPTIONAL BUT RECOMMENEDED   
	 * @param  [type] $params [description]
	 * @return [type]         [description]
	 *
	 * @todo Look into adding scope a request. Maybe even difference scopes into the WP admin
	 * @todo Add scope handler. Not sure if we need to do it here or not btu it will be a todo here
	 */
	private function authorize ()
	{
		$args = $_REQUEST;
		if (empty($args))
			new WO_Error("invalid_request");

		if (empty($args["response_type"]))
			new WO_Error("invalid_request");

		if(empty($args["client_id"]))
			new WO_Error("invalid_request");
	
		$storage = new WO_Storage();
		$client = $storage->verify_creditials($args["client_id"]);
		if( $client == false )
			new WO_Error("unauthorized_client");

		if ( strtolower($args["response_type"]) === "code" )
			self::_authorize_code($client, $args);


		// Just to be safe
		exit;
	}


	/**
	 * PRIVATE FUNCTION 
	 * @param  [type] $args [description]
	 * @return [type]       [description]
	 */
	private function _authorize_code( $client, $args )
	{
		if (empty($args))
			new WO_Error("invalid_request");
		
		if ( is_user_logged_in() === false )
			wp_redirect( wp_login_url( site_url() . $_SERVER['REQUEST_URI']) );

		$storage = new WO_Storage();
		$code = $storage->create_code($args["client_id"]);

		new WO_Redirect($storage::get_redirect_uri($args["client_id"])."?code=".$code);
		//new WO_Output(array('code'=>$code));
	}

	/**
	 * PRIVATE FUNCTION
	 * @param  [type] $args [description]
	 * @return [type]       [description]
	 */
	private function _authorize_token ( $client, $args )
	{
		if (empty($args))
			new WO_Error("invalid_request");

		// Check to too is the user is logged in or not.
		// If the user is not logged in we will need to redirct the user to wordpress login screen.
		// If the user is logged in, we need to set a access token and redirect to the URI associated
		// with the client id.
		
		if ( is_user_logged_in() === false )
		{
			// @todo This would be a great place to chek to see if a developer has set a custom 
			// authorization screen. For now we are going to use the default login screen
			wp_redirect( wp_login_url( site_url() . $_SERVER['REQUEST_URI']) );
		}
		else
		{
			// @todo Add an exires_in setting in wp admin 
			$storage = new WO_Storage();
			$tokens = $storage->create_token($client->client_id, $client->user_id, "token");

			// Instead of sending the code back as JSON we will return the code in the URL when we 
			// the user back to the redirect_URI
			// @todo Add state call back if it was presented in teh request
			$uri = "http://google.com/cb?access_token=".$tokens->token."&state=xyz&token_type=bearer&expires_in=null";
			header("Location: ". $uri);

		}

	}

}
WO_API::init();
